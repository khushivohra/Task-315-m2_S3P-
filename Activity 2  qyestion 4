#include <chrono>
#include <cstdlib>
#include <iostream>
#include <time.h>
#include <omp.h>

using namespace std::chrono;
using namespace std;

void randomVector(int vector[], int size) {
    #pragma omp parallel for default(none) shared(vector, size)
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

int main() {
    unsigned long size = 100000000;
    srand(time(0));
    int *v1, *v2, *v3;
    unsigned long total = 0; 

    auto start = high_resolution_clock::now(); 

    #pragma omp parallel default(none) shared(size, total) private(v1, v2, v3)
    {
        int privateTotal = 0; 

        v1 = (int *)malloc(size * sizeof(int));
        v2 = (int *)malloc(size * sizeof(int));
        v3 = (int *)malloc(size * sizeof(int));

        #pragma omp for
        for (int i = 0; i < size; i++) {
            v1[i] = rand() % 100;
            v2[i] = rand() % 100;
        }

        #pragma omp for
        for (int i = 0; i < size; i++) {
            v3[i] = v1[i] + v2[i];
            privateTotal += v3[i]; 
        }

        #pragma omp critical
        total += privateTotal; 
        free(v1);
        free(v2);
        free(v3);
    }

    auto stop = high_resolution_clock::now(); 
    auto duration = duration_cast<microseconds>(stop - start); 

    cout << "Total sum of elements in v3: " << total << endl;
    cout << "Time taken: " << duration.count() << " microseconds" << endl; 

    return 0;
}
